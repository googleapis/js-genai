/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import * as fs from 'fs';
import {ApiClient} from './_api_client';
import * as common from './_common';
import {BaseModule} from './_common';
import * as t from './_transformers';
import {PagedItem, Pager} from './pagers';
import * as types from './types';

export class Files extends BaseModule {
  constructor(private readonly apiClient: ApiClient) {
    super();
  }

  /**
   * This method lists all files from the service.
   *
   * @param params - The parameters for the list request
   * @return The paginated results of the list of files
   *
   * @example
   * The following code prints the names of all files from the service, the
   * szie of each page is 2.
   *
   * const listResponse = await client.files.list({config: {'pageSize': 2}});
   * for await (const file of listResponse) {
   *   console.log(file.name());
   * }
   */
  list = async (
    params: types.ListFilesParameters = {},
  ): Promise<Pager<types.File>> => {
    return new Pager<types.File>(
      PagedItem.PAGED_ITEM_FILES,
      this.listInternal,
      await this.listInternal(params),
      params.config,
    );
  };

  /**
   * Uploads a file asynchronously using a supported fileservice.
   *
   * @param file The path to the file to be uploaded.
   * @param config Optional parameters to set `display_name`, `mime_type`, and `name`.
   * @return A promise that resolves to a `File` object.
   * @throws An error if Vertex AI is used as the fileservice.
   * @throws An error if the `mimeType` is not provided.
   * @throws An error if the upload URL cannot be obtained.
   */
  async upload(
    file: string,
    config?: types.UploadFileConfig,
  ): Promise<types.File> {
    /** Calls the API to upload a file asynchronously using a supported fileservice.

    Args:
    file:  The path to the file to be uploaded.
    config: Optional parameters to set `diplay_name`, `mime_type`, and `name`.
    */
    if (this.apiClient.isVertexAI()) {
      throw new Error(
        'Vertex AI does not support creating files. You can upload files to GCS files instead.',
      );
    }

    let fileToUpload: types.File = {};
    if (config !== undefined && config !== null) {
      fileToUpload.mimeType = config.mimeType;
      fileToUpload.name = config.name;
      fileToUpload.displayName = config.displayName;
    }

    if (fileToUpload.name && fileToUpload.name.startsWith('files/')) {
      fileToUpload.name = `files/${fileToUpload.name}`;
    }

    const stats = fs.statSync(file);
    fileToUpload.sizeBytes = stats.size;

    if (typeof fileToUpload.mimeType == 'undefined') {
      throw new Error('Must provide a mimeType.');
    }

    let httpOptions: any = {};
    if (config?.httpOptions != null) {
      httpOptions = config.httpOptions;
    } else {
      httpOptions = {
        apiVersion: '', // api-version is set in the path.
        headers: {
          'Content-Type': 'application/json',
          'X-Goog-Upload-Protocol': 'resumable',
          'X-Goog-Upload-Command': 'start',
          'X-Goog-Upload-Header-Content-Length': `${fileToUpload.sizeBytes}`,
          'X-Goog-Upload-Header-Content-Type': `${fileToUpload.mimeType}`,
        },
      };
    }

    let body: Record<string, any> = createFileParametersToMldev(
      this.apiClient,
      {file: fileToUpload},
    );
    let fullHttpResponse = await this.apiClient.request({
      path: common.formatMap('upload/v1beta/files', body['_url']),
      body: JSON.stringify(body),
      httpMethod: 'POST',
      httpOptions,
    });

    let uploadUrl: string | undefined =
      fullHttpResponse?.headers?.['x-goog-upload-url'];
    if (uploadUrl === undefined) {
      throw new Error('Failed to get upload url.');
    }

    let returnFile = await this.apiClient.uploadFile(
      file,
      uploadUrl,
      fileToUpload.sizeBytes,
    );

    return fileFromMldev(this.apiClient, returnFile['file']) as types.File;
  }

  private async listInternal(
    params: types.ListFilesParameters,
  ): Promise<types.ListFilesResponse> {
    let response: Promise<types.ListFilesResponse>;
    let path: string = '';
    let queryParams: Record<string, string> = {};
    if (this.apiClient.isVertexAI()) {
      const body = listFilesParametersToVertex(this.apiClient, params);
      path = common.formatMap('None', body['_url'] as Record<string, unknown>);
      queryParams = body['_query'] as Record<string, string>;
      delete body['config'];
      delete body['_url'];
      delete body['_query'];

      response = this.apiClient
        .request({
          path: path,
          queryParams: queryParams,
          body: JSON.stringify(body),
          httpMethod: 'GET',
          httpOptions: params.config?.httpOptions,
        })
        .then((httpResponse) => {
          return httpResponse.json();
        });

      return response.then((apiResponse) => {
        const resp = listFilesResponseFromVertex(this.apiClient, apiResponse);
        const typedResp = new types.ListFilesResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    } else {
      const body = listFilesParametersToMldev(this.apiClient, params);
      path = common.formatMap('files', body['_url'] as Record<string, unknown>);
      queryParams = body['_query'] as Record<string, string>;
      delete body['config'];
      delete body['_url'];
      delete body['_query'];

      response = this.apiClient
        .request({
          path: path,
          queryParams: queryParams,
          body: JSON.stringify(body),
          httpMethod: 'GET',
          httpOptions: params.config?.httpOptions,
        })
        .then((httpResponse) => {
          return httpResponse.json();
        });

      return response.then((apiResponse) => {
        const resp = listFilesResponseFromMldev(this.apiClient, apiResponse);
        const typedResp = new types.ListFilesResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    }
  }

  private async createInternal(
    params: types.CreateFileParameters,
  ): Promise<types.CreateFileResponse> {
    let response: Promise<types.CreateFileResponse>;
    let path: string = '';
    let queryParams: Record<string, string> = {};
    if (this.apiClient.isVertexAI()) {
      const body = createFileParametersToVertex(this.apiClient, params);
      path = common.formatMap('', body['_url'] as Record<string, unknown>);
      queryParams = body['_query'] as Record<string, string>;
      delete body['config'];
      delete body['_url'];
      delete body['_query'];

      response = this.apiClient
        .request({
          path: path,
          queryParams: queryParams,
          body: JSON.stringify(body),
          httpMethod: 'POST',
          httpOptions: params.config?.httpOptions,
        })
        .then((httpResponse) => {
          return httpResponse.json();
        });

      return response.then((apiResponse) => {
        const resp = createFileResponseFromVertex(this.apiClient, apiResponse);
        const typedResp = new types.CreateFileResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    } else {
      const body = createFileParametersToMldev(this.apiClient, params);
      path = common.formatMap(
        'upload/v1beta/files',
        body['_url'] as Record<string, unknown>,
      );
      queryParams = body['_query'] as Record<string, string>;
      delete body['config'];
      delete body['_url'];
      delete body['_query'];

      response = this.apiClient
        .request({
          path: path,
          queryParams: queryParams,
          body: JSON.stringify(body),
          httpMethod: 'POST',
          httpOptions: params.config?.httpOptions,
        })
        .then((httpResponse) => {
          return httpResponse.json();
        });

      return response.then((apiResponse) => {
        const resp = createFileResponseFromMldev(this.apiClient, apiResponse);
        const typedResp = new types.CreateFileResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    }
  }

  async get(params: types.GetFileParameters): Promise<types.File> {
    let response: Promise<types.File>;
    let path: string = '';
    let queryParams: Record<string, string> = {};
    if (this.apiClient.isVertexAI()) {
      const body = getFileParametersToVertex(this.apiClient, params);
      path = common.formatMap('None', body['_url'] as Record<string, unknown>);
      queryParams = body['_query'] as Record<string, string>;
      delete body['config'];
      delete body['_url'];
      delete body['_query'];

      response = this.apiClient
        .request({
          path: path,
          queryParams: queryParams,
          body: JSON.stringify(body),
          httpMethod: 'GET',
          httpOptions: params.config?.httpOptions,
        })
        .then((httpResponse) => {
          return httpResponse.json();
        });

      return response.then((apiResponse) => {
        const resp = fileFromVertex(this.apiClient, apiResponse);

        return resp as types.File;
      });
    } else {
      const body = getFileParametersToMldev(this.apiClient, params);
      path = common.formatMap(
        'files/{file}',
        body['_url'] as Record<string, unknown>,
      );
      queryParams = body['_query'] as Record<string, string>;
      delete body['config'];
      delete body['_url'];
      delete body['_query'];

      response = this.apiClient
        .request({
          path: path,
          queryParams: queryParams,
          body: JSON.stringify(body),
          httpMethod: 'GET',
          httpOptions: params.config?.httpOptions,
        })
        .then((httpResponse) => {
          return httpResponse.json();
        });

      return response.then((apiResponse) => {
        const resp = fileFromMldev(this.apiClient, apiResponse);

        return resp as types.File;
      });
    }
  }
}

function listFilesConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ListFilesConfig,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (
    parentObject !== undefined &&
    fromPageSize !== undefined &&
    fromPageSize !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (
    parentObject !== undefined &&
    fromPageToken !== undefined &&
    fromPageToken !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  return toObject;
}

function listFilesConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ListFilesConfig,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (
    parentObject !== undefined &&
    fromPageSize !== undefined &&
    fromPageSize !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (
    parentObject !== undefined &&
    fromPageToken !== undefined &&
    fromPageToken !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  return toObject;
}

function listFilesParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.ListFilesParameters,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      listFilesConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function listFilesParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.ListFilesParameters,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['config']) !== undefined) {
    throw new Error('config parameter is not supported in Vertex AI.');
  }

  return toObject;
}

function fileStatusToMldev(
  apiClient: ApiClient,
  fromObject: types.FileStatus,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromDetails = common.getValueByPath(fromObject, ['details']);
  if (fromDetails !== undefined && fromDetails !== null) {
    common.setValueByPath(toObject, ['details'], fromDetails);
  }

  const fromMessage = common.getValueByPath(fromObject, ['message']);
  if (fromMessage !== undefined && fromMessage !== null) {
    common.setValueByPath(toObject, ['message'], fromMessage);
  }

  const fromCode = common.getValueByPath(fromObject, ['code']);
  if (fromCode !== undefined && fromCode !== null) {
    common.setValueByPath(toObject, ['code'], fromCode);
  }

  return toObject;
}

function fileStatusToVertex(
  apiClient: ApiClient,
  fromObject: types.FileStatus,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['details']) !== undefined) {
    throw new Error('details parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['message']) !== undefined) {
    throw new Error('message parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['code']) !== undefined) {
    throw new Error('code parameter is not supported in Vertex AI.');
  }

  return toObject;
}

function fileToMldev(
  apiClient: ApiClient,
  fromObject: types.File,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName !== undefined && fromDisplayName !== null) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType !== undefined && fromMimeType !== null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  const fromSizeBytes = common.getValueByPath(fromObject, ['sizeBytes']);
  if (fromSizeBytes !== undefined && fromSizeBytes !== null) {
    common.setValueByPath(toObject, ['sizeBytes'], fromSizeBytes);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined && fromCreateTime !== null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromExpirationTime = common.getValueByPath(fromObject, [
    'expirationTime',
  ]);
  if (fromExpirationTime !== undefined && fromExpirationTime !== null) {
    common.setValueByPath(toObject, ['expirationTime'], fromExpirationTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined && fromUpdateTime !== null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromSha256Hash = common.getValueByPath(fromObject, ['sha256Hash']);
  if (fromSha256Hash !== undefined && fromSha256Hash !== null) {
    common.setValueByPath(toObject, ['sha256Hash'], fromSha256Hash);
  }

  const fromUri = common.getValueByPath(fromObject, ['uri']);
  if (fromUri !== undefined && fromUri !== null) {
    common.setValueByPath(toObject, ['uri'], fromUri);
  }

  const fromDownloadUri = common.getValueByPath(fromObject, ['downloadUri']);
  if (fromDownloadUri !== undefined && fromDownloadUri !== null) {
    common.setValueByPath(toObject, ['downloadUri'], fromDownloadUri);
  }

  const fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState !== undefined && fromState !== null) {
    common.setValueByPath(toObject, ['state'], fromState);
  }

  const fromSource = common.getValueByPath(fromObject, ['source']);
  if (fromSource !== undefined && fromSource !== null) {
    common.setValueByPath(toObject, ['source'], fromSource);
  }

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata !== undefined && fromVideoMetadata !== null) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError !== undefined && fromError !== null) {
    common.setValueByPath(
      toObject,
      ['error'],
      fileStatusToMldev(apiClient, fromError, toObject),
    );
  }

  return toObject;
}

function fileToVertex(
  apiClient: ApiClient,
  fromObject: types.File,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['name']) !== undefined) {
    throw new Error('name parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['displayName']) !== undefined) {
    throw new Error('displayName parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['mimeType']) !== undefined) {
    throw new Error('mimeType parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['sizeBytes']) !== undefined) {
    throw new Error('sizeBytes parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['createTime']) !== undefined) {
    throw new Error('createTime parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['expirationTime']) !== undefined) {
    throw new Error('expirationTime parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['updateTime']) !== undefined) {
    throw new Error('updateTime parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['sha256Hash']) !== undefined) {
    throw new Error('sha256Hash parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['uri']) !== undefined) {
    throw new Error('uri parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['downloadUri']) !== undefined) {
    throw new Error('downloadUri parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['state']) !== undefined) {
    throw new Error('state parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['source']) !== undefined) {
    throw new Error('source parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {
    throw new Error('videoMetadata parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['error']) !== undefined) {
    throw new Error('error parameter is not supported in Vertex AI.');
  }

  return toObject;
}

function createFileParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.CreateFileParameters,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromFile = common.getValueByPath(fromObject, ['file']);
  if (fromFile !== undefined && fromFile !== null) {
    common.setValueByPath(
      toObject,
      ['file'],
      fileToMldev(apiClient, fromFile, toObject),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function createFileParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.CreateFileParameters,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['file']) !== undefined) {
    throw new Error('file parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['config']) !== undefined) {
    throw new Error('config parameter is not supported in Vertex AI.');
  }

  return toObject;
}

function getFileParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GetFileParameters,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(
      toObject,
      ['_url', 'file'],
      t.tFileName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function getFileParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GetFileParameters,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  if (common.getValueByPath(fromObject, ['name']) !== undefined) {
    throw new Error('name parameter is not supported in Vertex AI.');
  }

  if (common.getValueByPath(fromObject, ['config']) !== undefined) {
    throw new Error('config parameter is not supported in Vertex AI.');
  }

  return toObject;
}

function fileStatusFromMldev(
  apiClient: ApiClient,
  fromObject: types.FileStatus,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromDetails = common.getValueByPath(fromObject, ['details']);
  if (fromDetails !== undefined && fromDetails !== null) {
    common.setValueByPath(toObject, ['details'], fromDetails);
  }

  const fromMessage = common.getValueByPath(fromObject, ['message']);
  if (fromMessage !== undefined && fromMessage !== null) {
    common.setValueByPath(toObject, ['message'], fromMessage);
  }

  const fromCode = common.getValueByPath(fromObject, ['code']);
  if (fromCode !== undefined && fromCode !== null) {
    common.setValueByPath(toObject, ['code'], fromCode);
  }

  return toObject;
}

function fileStatusFromVertex(
  apiClient: ApiClient,
  fromObject: types.FileStatus,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

function fileFromMldev(
  apiClient: ApiClient,
  fromObject: types.File,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName !== undefined && fromDisplayName !== null) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromMimeType = common.getValueByPath(fromObject, ['mimeType']);
  if (fromMimeType !== undefined && fromMimeType !== null) {
    common.setValueByPath(toObject, ['mimeType'], fromMimeType);
  }

  const fromSizeBytes = common.getValueByPath(fromObject, ['sizeBytes']);
  if (fromSizeBytes !== undefined && fromSizeBytes !== null) {
    common.setValueByPath(toObject, ['sizeBytes'], fromSizeBytes);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined && fromCreateTime !== null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromExpirationTime = common.getValueByPath(fromObject, [
    'expirationTime',
  ]);
  if (fromExpirationTime !== undefined && fromExpirationTime !== null) {
    common.setValueByPath(toObject, ['expirationTime'], fromExpirationTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined && fromUpdateTime !== null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromSha256Hash = common.getValueByPath(fromObject, ['sha256Hash']);
  if (fromSha256Hash !== undefined && fromSha256Hash !== null) {
    common.setValueByPath(toObject, ['sha256Hash'], fromSha256Hash);
  }

  const fromUri = common.getValueByPath(fromObject, ['uri']);
  if (fromUri !== undefined && fromUri !== null) {
    common.setValueByPath(toObject, ['uri'], fromUri);
  }

  const fromDownloadUri = common.getValueByPath(fromObject, ['downloadUri']);
  if (fromDownloadUri !== undefined && fromDownloadUri !== null) {
    common.setValueByPath(toObject, ['downloadUri'], fromDownloadUri);
  }

  const fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState !== undefined && fromState !== null) {
    common.setValueByPath(toObject, ['state'], fromState);
  }

  const fromSource = common.getValueByPath(fromObject, ['source']);
  if (fromSource !== undefined && fromSource !== null) {
    common.setValueByPath(toObject, ['source'], fromSource);
  }

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata !== undefined && fromVideoMetadata !== null) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError !== undefined && fromError !== null) {
    common.setValueByPath(
      toObject,
      ['error'],
      fileStatusFromMldev(apiClient, fromError, toObject),
    );
  }

  return toObject;
}

function fileFromVertex(
  apiClient: ApiClient,
  fromObject: types.File,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

function listFilesResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.ListFilesResponse,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken !== undefined && fromNextPageToken !== null) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromFiles = common.getValueByPath(fromObject, ['files']);
  if (fromFiles !== undefined && fromFiles !== null) {
    if (Array.isArray(fromFiles)) {
      common.setValueByPath(
        toObject,
        ['files'],
        fromFiles.map((item) => {
          return fileFromMldev(apiClient, item, toObject);
        }),
      );
    } else {
      common.setValueByPath(toObject, ['files'], fromFiles);
    }
  }

  return toObject;
}

function listFilesResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.ListFilesResponse,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  return toObject;
}

function createFileResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.CreateFileResponse,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromHttpHeaders = common.getValueByPath(fromObject, ['httpHeaders']);
  if (fromHttpHeaders !== undefined && fromHttpHeaders !== null) {
    common.setValueByPath(toObject, ['httpHeaders'], fromHttpHeaders);
  }

  return toObject;
}

function createFileResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.CreateFileResponse,
  parentObject?: Record<string, unknown>,
): Record<string, unknown> {
  const toObject: Record<string, unknown> = {};

  const fromHttpHeaders = common.getValueByPath(fromObject, ['httpHeaders']);
  if (fromHttpHeaders !== undefined && fromHttpHeaders !== null) {
    common.setValueByPath(toObject, ['httpHeaders'], fromHttpHeaders);
  }

  return toObject;
}
