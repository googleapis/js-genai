/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

/* tslint:disable:no-any jsdoc-tags enforce-comments-on-exported-symbols jsdoc-format */

import {ApiClient} from './_api_client';
import * as common from './_common';
import {BaseModule} from './_common';
import * as t from './_transformers';
import {PagedItem, Pager} from './pagers';
import * as types from './types';

export class Tunings extends BaseModule {
  constructor(private readonly apiClient: ApiClient) {
    super();
  }

  get = async (
    params: types.GetTuningJobParameters,
  ): Promise<types.TuningJob> => {
    return await this.getInternal(params);
  };

  list = async (
    params: types.ListTuningJobsParameters = {},
  ): Promise<Pager<types.TuningJob>> => {
    return new Pager<types.TuningJob>(
      PagedItem.PAGED_ITEM_TUNING_JOBS,
      this.listInternal,
      await this.listInternal(params),
      params.config,
    );
  };

  private async getInternal(
    params: types.GetTuningJobParameters,
  ): Promise<types.TuningJob> {
    let response: Promise<types.TuningJob>;
    let path = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['name'] = params.name;
    kwargs['config'] = params.config;
    if (this.apiClient.isVertexAI()) {
      body = getTuningJobParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.get(
        path,
        body,
        undefined,
        params.config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = tuningJobFromVertex(this.apiClient, apiResponse);

        return resp as types.TuningJob;
      });
    } else {
      body = getTuningJobParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.get(
        path,
        body,
        undefined,
        params.config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = tuningJobFromMldev(this.apiClient, apiResponse);

        return resp as types.TuningJob;
      });
    }
  }

  private async listInternal(
    params: types.ListTuningJobsParameters,
  ): Promise<types.ListTuningJobsResponse> {
    let response: Promise<types.ListTuningJobsResponse>;
    let path = '';
    let body: Record<string, any> = {};
    const kwargs: Record<string, any> = {};
    kwargs['config'] = params.config;
    if (this.apiClient.isVertexAI()) {
      body = listTuningJobsParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('tuningJobs', body['_url']);
      delete body['config'];
      response = this.apiClient.get(
        path,
        body,
        types.ListTuningJobsResponse,
        params.config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = listTuningJobsResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        const typed_resp = new types.ListTuningJobsResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    } else {
      body = listTuningJobsParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('tunedModels', body['_url']);
      delete body['config'];
      response = this.apiClient.get(
        path,
        body,
        types.ListTuningJobsResponse,
        params.config?.httpOptions,
      );

      return response.then((apiResponse) => {
        const resp = listTuningJobsResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        const typed_resp = new types.ListTuningJobsResponse();
        Object.assign(typed_resp, resp);
        return typed_resp;
      });
    }
  }
}

function getTuningJobParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GetTuningJobParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function getTuningJobParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GetTuningJobParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function listTuningJobsConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ListTuningJobsConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (
    parentObject !== undefined &&
    fromPageSize !== undefined &&
    fromPageSize !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (
    parentObject !== undefined &&
    fromPageToken !== undefined &&
    fromPageToken !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  const fromFilter = common.getValueByPath(fromObject, ['filter']);
  if (
    parentObject !== undefined &&
    fromFilter !== undefined &&
    fromFilter !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);
  }

  return toObject;
}

function listTuningJobsConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ListTuningJobsConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (
    parentObject !== undefined &&
    fromPageSize !== undefined &&
    fromPageSize !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (
    parentObject !== undefined &&
    fromPageToken !== undefined &&
    fromPageToken !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  const fromFilter = common.getValueByPath(fromObject, ['filter']);
  if (
    parentObject !== undefined &&
    fromFilter !== undefined &&
    fromFilter !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);
  }

  return toObject;
}

function listTuningJobsParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.ListTuningJobsParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      listTuningJobsConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function listTuningJobsParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.ListTuningJobsParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      listTuningJobsConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function tunedModelFromMldev(
  apiClient: ApiClient,
  fromObject: types.TunedModel,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['name']);
  if (fromModel !== undefined && fromModel !== null) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  const fromEndpoint = common.getValueByPath(fromObject, ['name']);
  if (fromEndpoint !== undefined && fromEndpoint !== null) {
    common.setValueByPath(toObject, ['endpoint'], fromEndpoint);
  }

  return toObject;
}

function tunedModelFromVertex(
  apiClient: ApiClient,
  fromObject: types.TunedModel,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined && fromModel !== null) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  const fromEndpoint = common.getValueByPath(fromObject, ['endpoint']);
  if (fromEndpoint !== undefined && fromEndpoint !== null) {
    common.setValueByPath(toObject, ['endpoint'], fromEndpoint);
  }

  return toObject;
}

function tuningJobFromMldev(
  apiClient: ApiClient,
  fromObject: types.TuningJob,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState !== undefined && fromState !== null) {
    common.setValueByPath(
      toObject,
      ['state'],
      t.tTuningJobStatus(apiClient, fromState),
    );
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined && fromCreateTime !== null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromStartTime = common.getValueByPath(fromObject, [
    'tuningTask',
    'startTime',
  ]);
  if (fromStartTime !== undefined && fromStartTime !== null) {
    common.setValueByPath(toObject, ['startTime'], fromStartTime);
  }

  const fromEndTime = common.getValueByPath(fromObject, [
    'tuningTask',
    'completeTime',
  ]);
  if (fromEndTime !== undefined && fromEndTime !== null) {
    common.setValueByPath(toObject, ['endTime'], fromEndTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined && fromUpdateTime !== null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined && fromDescription !== null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel !== undefined && fromBaseModel !== null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromTunedModel = common.getValueByPath(fromObject, ['_self']);
  if (fromTunedModel !== undefined && fromTunedModel !== null) {
    common.setValueByPath(
      toObject,
      ['tunedModel'],
      tunedModelFromMldev(apiClient, fromTunedModel, toObject),
    );
  }

  const fromDistillationSpec = common.getValueByPath(fromObject, [
    'distillationSpec',
  ]);
  if (fromDistillationSpec !== undefined && fromDistillationSpec !== null) {
    common.setValueByPath(toObject, ['distillationSpec'], fromDistillationSpec);
  }

  const fromExperiment = common.getValueByPath(fromObject, ['experiment']);
  if (fromExperiment !== undefined && fromExperiment !== null) {
    common.setValueByPath(toObject, ['experiment'], fromExperiment);
  }

  const fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (fromLabels !== undefined && fromLabels !== null) {
    common.setValueByPath(toObject, ['labels'], fromLabels);
  }

  const fromPipelineJob = common.getValueByPath(fromObject, ['pipelineJob']);
  if (fromPipelineJob !== undefined && fromPipelineJob !== null) {
    common.setValueByPath(toObject, ['pipelineJob'], fromPipelineJob);
  }

  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [
    'tunedModelDisplayName',
  ]);
  if (
    fromTunedModelDisplayName !== undefined &&
    fromTunedModelDisplayName !== null
  ) {
    common.setValueByPath(
      toObject,
      ['tunedModelDisplayName'],
      fromTunedModelDisplayName,
    );
  }

  return toObject;
}

function tuningJobFromVertex(
  apiClient: ApiClient,
  fromObject: types.TuningJob,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState !== undefined && fromState !== null) {
    common.setValueByPath(
      toObject,
      ['state'],
      t.tTuningJobStatus(apiClient, fromState),
    );
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined && fromCreateTime !== null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromStartTime = common.getValueByPath(fromObject, ['startTime']);
  if (fromStartTime !== undefined && fromStartTime !== null) {
    common.setValueByPath(toObject, ['startTime'], fromStartTime);
  }

  const fromEndTime = common.getValueByPath(fromObject, ['endTime']);
  if (fromEndTime !== undefined && fromEndTime !== null) {
    common.setValueByPath(toObject, ['endTime'], fromEndTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined && fromUpdateTime !== null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError !== undefined && fromError !== null) {
    common.setValueByPath(toObject, ['error'], fromError);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined && fromDescription !== null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel !== undefined && fromBaseModel !== null) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  const fromTunedModel = common.getValueByPath(fromObject, ['tunedModel']);
  if (fromTunedModel !== undefined && fromTunedModel !== null) {
    common.setValueByPath(
      toObject,
      ['tunedModel'],
      tunedModelFromVertex(apiClient, fromTunedModel, toObject),
    );
  }

  const fromSupervisedTuningSpec = common.getValueByPath(fromObject, [
    'supervisedTuningSpec',
  ]);
  if (
    fromSupervisedTuningSpec !== undefined &&
    fromSupervisedTuningSpec !== null
  ) {
    common.setValueByPath(
      toObject,
      ['supervisedTuningSpec'],
      fromSupervisedTuningSpec,
    );
  }

  const fromTuningDataStats = common.getValueByPath(fromObject, [
    'tuningDataStats',
  ]);
  if (fromTuningDataStats !== undefined && fromTuningDataStats !== null) {
    common.setValueByPath(toObject, ['tuningDataStats'], fromTuningDataStats);
  }

  const fromEncryptionSpec = common.getValueByPath(fromObject, [
    'encryptionSpec',
  ]);
  if (fromEncryptionSpec !== undefined && fromEncryptionSpec !== null) {
    common.setValueByPath(toObject, ['encryptionSpec'], fromEncryptionSpec);
  }

  const fromPartnerModelTuningSpec = common.getValueByPath(fromObject, [
    'partnerModelTuningSpec',
  ]);
  if (
    fromPartnerModelTuningSpec !== undefined &&
    fromPartnerModelTuningSpec !== null
  ) {
    common.setValueByPath(
      toObject,
      ['partnerModelTuningSpec'],
      fromPartnerModelTuningSpec,
    );
  }

  const fromDistillationSpec = common.getValueByPath(fromObject, [
    'distillationSpec',
  ]);
  if (fromDistillationSpec !== undefined && fromDistillationSpec !== null) {
    common.setValueByPath(toObject, ['distillationSpec'], fromDistillationSpec);
  }

  const fromExperiment = common.getValueByPath(fromObject, ['experiment']);
  if (fromExperiment !== undefined && fromExperiment !== null) {
    common.setValueByPath(toObject, ['experiment'], fromExperiment);
  }

  const fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (fromLabels !== undefined && fromLabels !== null) {
    common.setValueByPath(toObject, ['labels'], fromLabels);
  }

  const fromPipelineJob = common.getValueByPath(fromObject, ['pipelineJob']);
  if (fromPipelineJob !== undefined && fromPipelineJob !== null) {
    common.setValueByPath(toObject, ['pipelineJob'], fromPipelineJob);
  }

  const fromTunedModelDisplayName = common.getValueByPath(fromObject, [
    'tunedModelDisplayName',
  ]);
  if (
    fromTunedModelDisplayName !== undefined &&
    fromTunedModelDisplayName !== null
  ) {
    common.setValueByPath(
      toObject,
      ['tunedModelDisplayName'],
      fromTunedModelDisplayName,
    );
  }

  return toObject;
}

function listTuningJobsResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.ListTuningJobsResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken !== undefined && fromNextPageToken !== null) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromTuningJobs = common.getValueByPath(fromObject, ['tunedModels']);
  if (fromTuningJobs !== undefined && fromTuningJobs !== null) {
    common.setValueByPath(
      toObject,
      ['tuningJobs'],
      fromTuningJobs.map((item: any) => {
        return tuningJobFromMldev(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}

function listTuningJobsResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.ListTuningJobsResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken !== undefined && fromNextPageToken !== null) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromTuningJobs = common.getValueByPath(fromObject, ['tuningJobs']);
  if (fromTuningJobs !== undefined && fromTuningJobs !== null) {
    common.setValueByPath(
      toObject,
      ['tuningJobs'],
      fromTuningJobs.map((item: any) => {
        return tuningJobFromVertex(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}
