/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import {ApiClient} from './_api_client';
import * as common from './_common';
import {BaseModule} from './_common';
import * as t from './_transformers';
import {PagedItem, Pager} from './pagers';
import * as types from './types';

export class Caches extends BaseModule {
  constructor(private readonly apiClient: ApiClient) {
    super();
  }

  /**
   * Lists cached content configurations.
   *
   * @example
   * ```ts
   * const cachedContents = await client.caches.list({config: {'pageSize': 2}});
   * for (const cachedContent of cachedContents) {
   *   console.log(cachedContent);
   * }
   * ```
   */
  list = async (
    params: types.ListCachedContentsParameters = {},
  ): Promise<Pager<types.CachedContent>> => {
    return new Pager<types.CachedContent>(
      PagedItem.PAGED_ITEM_CACHED_CONTENTS,
      this.listInternal,
      await this.listInternal(params),
      params.config,
    );
  };

  /**
   * Creates cached content, this call will initialize the cached content in
   * the data storage, and users need to pay for the cache data storage.
   *
   * @example
   * ```ts
   * const contents = ...; // Initialize the content to cache.
   * const response = await client.caches.create({
   *   model: 'gemini-1.5-flash',
   *   config: {
   *    'contents': contents,
   *    'displayName': 'test cache',
   *    'systemInstruction': 'What is the sum of the two pdfs?',
   *    'ttl': '86400s',
   *  }
   * });
   * ```
   */
  async create(
    params: types.CreateCachedContentParameters,
  ): Promise<types.CachedContent> {
    let response: Promise<types.CachedContent>;
    let path: string = '';
    let body: Record<string, any> = {};
    if (this.apiClient.isVertexAI()) {
      body = createCachedContentParametersToVertex(this.apiClient, params);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config'];
      response = this.apiClient.post(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromVertex(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    } else {
      body = createCachedContentParametersToMldev(this.apiClient, params);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config'];
      response = this.apiClient.post(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromMldev(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    }
  }

  /**
   * Gets cached content configurations.
   *
   * @example
   * ```ts
   * await client.caches.get({name: 'gemini-1.5-flash'});
   * ```
   */
  async get(
    params: types.GetCachedContentParameters,
  ): Promise<types.CachedContent> {
    let response: Promise<types.CachedContent>;
    let path: string = '';
    let body: Record<string, any> = {};
    if (this.apiClient.isVertexAI()) {
      body = getCachedContentParametersToVertex(this.apiClient, params);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.get(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromVertex(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    } else {
      body = getCachedContentParametersToMldev(this.apiClient, params);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.get(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromMldev(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    }
  }

  /**
   * Deletes cached content.
   *
   * @example
   * ```ts
   * await client.caches.delete({name: 'gemini-1.5-flash'});
   * ```
   */
  async delete(
    params: types.DeleteCachedContentParameters,
  ): Promise<types.DeleteCachedContentResponse> {
    let response: Promise<types.DeleteCachedContentResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    if (this.apiClient.isVertexAI()) {
      body = deleteCachedContentParametersToVertex(this.apiClient, params);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.delete(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = deleteCachedContentResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        const typedResp = new types.DeleteCachedContentResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    } else {
      body = deleteCachedContentParametersToMldev(this.apiClient, params);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.delete(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = deleteCachedContentResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        const typedResp = new types.DeleteCachedContentResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    }
  }

  /**
   * Updates cached content configurations.
   *
   * @example
   * ```ts
   * const response = await client.caches.update({
   *   name: 'gemini-1.5-flash',
   *   config: {'ttl': '7600s'}
   * });
   * ```
   */
  async update(
    params: types.UpdateCachedContentParameters,
  ): Promise<types.CachedContent> {
    let response: Promise<types.CachedContent>;
    let path: string = '';
    let body: Record<string, any> = {};
    if (this.apiClient.isVertexAI()) {
      body = updateCachedContentParametersToVertex(this.apiClient, params);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.patch(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromVertex(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    } else {
      body = updateCachedContentParametersToMldev(this.apiClient, params);
      path = common.formatMap('{name}', body['_url']);
      delete body['config'];
      response = this.apiClient.patch(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = cachedContentFromMldev(this.apiClient, apiResponse);

        return resp as types.CachedContent;
      });
    }
  }

  private async listInternal(
    params: types.ListCachedContentsParameters,
  ): Promise<types.ListCachedContentsResponse> {
    let response: Promise<types.ListCachedContentsResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    if (this.apiClient.isVertexAI()) {
      body = listCachedContentsParametersToVertex(this.apiClient, params);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config'];
      response = this.apiClient.get(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = listCachedContentsResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        const typedResp = new types.ListCachedContentsResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    } else {
      body = listCachedContentsParametersToMldev(this.apiClient, params);
      path = common.formatMap('cachedContents', body['_url']);
      delete body['config'];
      response = this.apiClient.get(path, body, params.config?.httpOptions);

      return response.then((apiResponse) => {
        const resp = listCachedContentsResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        const typedResp = new types.ListCachedContentsResponse();
        Object.assign(typedResp, resp);
        return typedResp;
      });
    }
  }
}

function partToMldev(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['videoMetadata']) !== undefined) {
    throw new Error('videoMetadata parameter is not supported in Gemini API.');
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined && fromThought !== null) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (
    fromCodeExecutionResult !== undefined &&
    fromCodeExecutionResult !== null
  ) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined && fromExecutableCode !== null) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined && fromFileData !== null) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined && fromFunctionCall !== null) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined && fromFunctionResponse !== null) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined && fromInlineData !== null) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined && fromText !== null) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

function partToVertex(
  apiClient: ApiClient,
  fromObject: types.Part,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromVideoMetadata = common.getValueByPath(fromObject, [
    'videoMetadata',
  ]);
  if (fromVideoMetadata !== undefined && fromVideoMetadata !== null) {
    common.setValueByPath(toObject, ['videoMetadata'], fromVideoMetadata);
  }

  const fromThought = common.getValueByPath(fromObject, ['thought']);
  if (fromThought !== undefined && fromThought !== null) {
    common.setValueByPath(toObject, ['thought'], fromThought);
  }

  const fromCodeExecutionResult = common.getValueByPath(fromObject, [
    'codeExecutionResult',
  ]);
  if (
    fromCodeExecutionResult !== undefined &&
    fromCodeExecutionResult !== null
  ) {
    common.setValueByPath(
      toObject,
      ['codeExecutionResult'],
      fromCodeExecutionResult,
    );
  }

  const fromExecutableCode = common.getValueByPath(fromObject, [
    'executableCode',
  ]);
  if (fromExecutableCode !== undefined && fromExecutableCode !== null) {
    common.setValueByPath(toObject, ['executableCode'], fromExecutableCode);
  }

  const fromFileData = common.getValueByPath(fromObject, ['fileData']);
  if (fromFileData !== undefined && fromFileData !== null) {
    common.setValueByPath(toObject, ['fileData'], fromFileData);
  }

  const fromFunctionCall = common.getValueByPath(fromObject, ['functionCall']);
  if (fromFunctionCall !== undefined && fromFunctionCall !== null) {
    common.setValueByPath(toObject, ['functionCall'], fromFunctionCall);
  }

  const fromFunctionResponse = common.getValueByPath(fromObject, [
    'functionResponse',
  ]);
  if (fromFunctionResponse !== undefined && fromFunctionResponse !== null) {
    common.setValueByPath(toObject, ['functionResponse'], fromFunctionResponse);
  }

  const fromInlineData = common.getValueByPath(fromObject, ['inlineData']);
  if (fromInlineData !== undefined && fromInlineData !== null) {
    common.setValueByPath(toObject, ['inlineData'], fromInlineData);
  }

  const fromText = common.getValueByPath(fromObject, ['text']);
  if (fromText !== undefined && fromText !== null) {
    common.setValueByPath(toObject, ['text'], fromText);
  }

  return toObject;
}

/** @internal */
export function contentToMldev(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined && fromParts !== null) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts.map((item: any) => {
        return partToMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined && fromRole !== null) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

/** @internal */
export function contentToVertex(
  apiClient: ApiClient,
  fromObject: types.Content,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromParts = common.getValueByPath(fromObject, ['parts']);
  if (fromParts !== undefined && fromParts !== null) {
    common.setValueByPath(
      toObject,
      ['parts'],
      fromParts.map((item: any) => {
        return partToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromRole = common.getValueByPath(fromObject, ['role']);
  if (fromRole !== undefined && fromRole !== null) {
    common.setValueByPath(toObject, ['role'], fromRole);
  }

  return toObject;
}

function schemaToMldev(
  apiClient: ApiClient,
  fromObject: types.Schema,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['minItems']) !== undefined) {
    throw new Error('minItems parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['example']) !== undefined) {
    throw new Error('example parameter is not supported in Gemini API.');
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering !== undefined && fromPropertyOrdering !== null) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  if (common.getValueByPath(fromObject, ['pattern']) !== undefined) {
    throw new Error('pattern parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minimum']) !== undefined) {
    throw new Error('minimum parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['default']) !== undefined) {
    throw new Error('default parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['anyOf']) !== undefined) {
    throw new Error('anyOf parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxLength']) !== undefined) {
    throw new Error('maxLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['title']) !== undefined) {
    throw new Error('title parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minLength']) !== undefined) {
    throw new Error('minLength parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['minProperties']) !== undefined) {
    throw new Error('minProperties parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxItems']) !== undefined) {
    throw new Error('maxItems parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maximum']) !== undefined) {
    throw new Error('maximum parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['nullable']) !== undefined) {
    throw new Error('nullable parameter is not supported in Gemini API.');
  }

  if (common.getValueByPath(fromObject, ['maxProperties']) !== undefined) {
    throw new Error('maxProperties parameter is not supported in Gemini API.');
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType !== undefined && fromType !== null) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined && fromDescription !== null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum !== undefined && fromEnum !== null) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat !== undefined && fromFormat !== null) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems !== undefined && fromItems !== null) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties !== undefined && fromProperties !== null) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired !== undefined && fromRequired !== null) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  return toObject;
}

function schemaToVertex(
  apiClient: ApiClient,
  fromObject: types.Schema,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMinItems = common.getValueByPath(fromObject, ['minItems']);
  if (fromMinItems !== undefined && fromMinItems !== null) {
    common.setValueByPath(toObject, ['minItems'], fromMinItems);
  }

  const fromExample = common.getValueByPath(fromObject, ['example']);
  if (fromExample !== undefined && fromExample !== null) {
    common.setValueByPath(toObject, ['example'], fromExample);
  }

  const fromPropertyOrdering = common.getValueByPath(fromObject, [
    'propertyOrdering',
  ]);
  if (fromPropertyOrdering !== undefined && fromPropertyOrdering !== null) {
    common.setValueByPath(toObject, ['propertyOrdering'], fromPropertyOrdering);
  }

  const fromPattern = common.getValueByPath(fromObject, ['pattern']);
  if (fromPattern !== undefined && fromPattern !== null) {
    common.setValueByPath(toObject, ['pattern'], fromPattern);
  }

  const fromMinimum = common.getValueByPath(fromObject, ['minimum']);
  if (fromMinimum !== undefined && fromMinimum !== null) {
    common.setValueByPath(toObject, ['minimum'], fromMinimum);
  }

  const fromDefault = common.getValueByPath(fromObject, ['default']);
  if (fromDefault !== undefined && fromDefault !== null) {
    common.setValueByPath(toObject, ['default'], fromDefault);
  }

  const fromAnyOf = common.getValueByPath(fromObject, ['anyOf']);
  if (fromAnyOf !== undefined && fromAnyOf !== null) {
    common.setValueByPath(toObject, ['anyOf'], fromAnyOf);
  }

  const fromMaxLength = common.getValueByPath(fromObject, ['maxLength']);
  if (fromMaxLength !== undefined && fromMaxLength !== null) {
    common.setValueByPath(toObject, ['maxLength'], fromMaxLength);
  }

  const fromTitle = common.getValueByPath(fromObject, ['title']);
  if (fromTitle !== undefined && fromTitle !== null) {
    common.setValueByPath(toObject, ['title'], fromTitle);
  }

  const fromMinLength = common.getValueByPath(fromObject, ['minLength']);
  if (fromMinLength !== undefined && fromMinLength !== null) {
    common.setValueByPath(toObject, ['minLength'], fromMinLength);
  }

  const fromMinProperties = common.getValueByPath(fromObject, [
    'minProperties',
  ]);
  if (fromMinProperties !== undefined && fromMinProperties !== null) {
    common.setValueByPath(toObject, ['minProperties'], fromMinProperties);
  }

  const fromMaxItems = common.getValueByPath(fromObject, ['maxItems']);
  if (fromMaxItems !== undefined && fromMaxItems !== null) {
    common.setValueByPath(toObject, ['maxItems'], fromMaxItems);
  }

  const fromMaximum = common.getValueByPath(fromObject, ['maximum']);
  if (fromMaximum !== undefined && fromMaximum !== null) {
    common.setValueByPath(toObject, ['maximum'], fromMaximum);
  }

  const fromNullable = common.getValueByPath(fromObject, ['nullable']);
  if (fromNullable !== undefined && fromNullable !== null) {
    common.setValueByPath(toObject, ['nullable'], fromNullable);
  }

  const fromMaxProperties = common.getValueByPath(fromObject, [
    'maxProperties',
  ]);
  if (fromMaxProperties !== undefined && fromMaxProperties !== null) {
    common.setValueByPath(toObject, ['maxProperties'], fromMaxProperties);
  }

  const fromType = common.getValueByPath(fromObject, ['type']);
  if (fromType !== undefined && fromType !== null) {
    common.setValueByPath(toObject, ['type'], fromType);
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined && fromDescription !== null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromEnum = common.getValueByPath(fromObject, ['enum']);
  if (fromEnum !== undefined && fromEnum !== null) {
    common.setValueByPath(toObject, ['enum'], fromEnum);
  }

  const fromFormat = common.getValueByPath(fromObject, ['format']);
  if (fromFormat !== undefined && fromFormat !== null) {
    common.setValueByPath(toObject, ['format'], fromFormat);
  }

  const fromItems = common.getValueByPath(fromObject, ['items']);
  if (fromItems !== undefined && fromItems !== null) {
    common.setValueByPath(toObject, ['items'], fromItems);
  }

  const fromProperties = common.getValueByPath(fromObject, ['properties']);
  if (fromProperties !== undefined && fromProperties !== null) {
    common.setValueByPath(toObject, ['properties'], fromProperties);
  }

  const fromRequired = common.getValueByPath(fromObject, ['required']);
  if (fromRequired !== undefined && fromRequired !== null) {
    common.setValueByPath(toObject, ['required'], fromRequired);
  }

  return toObject;
}

function functionDeclarationToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  if (common.getValueByPath(fromObject, ['response']) !== undefined) {
    throw new Error('response parameter is not supported in Gemini API.');
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined && fromDescription !== null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters !== undefined && fromParameters !== null) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

function functionDeclarationToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionDeclaration,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromResponse = common.getValueByPath(fromObject, ['response']);
  if (fromResponse !== undefined && fromResponse !== null) {
    common.setValueByPath(
      toObject,
      ['response'],
      schemaToVertex(apiClient, fromResponse, toObject),
    );
  }

  const fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined && fromDescription !== null) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromParameters = common.getValueByPath(fromObject, ['parameters']);
  if (fromParameters !== undefined && fromParameters !== null) {
    common.setValueByPath(toObject, ['parameters'], fromParameters);
  }

  return toObject;
}

function googleSearchToMldev(
  apiClient: ApiClient,
  fromObject: types.GoogleSearch,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function googleSearchToVertex(
  apiClient: ApiClient,
  fromObject: types.GoogleSearch,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function dynamicRetrievalConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined && fromMode !== null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold !== undefined && fromDynamicThreshold !== null) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

function dynamicRetrievalConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.DynamicRetrievalConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined && fromMode !== null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromDynamicThreshold = common.getValueByPath(fromObject, [
    'dynamicThreshold',
  ]);
  if (fromDynamicThreshold !== undefined && fromDynamicThreshold !== null) {
    common.setValueByPath(toObject, ['dynamicThreshold'], fromDynamicThreshold);
  }

  return toObject;
}

function googleSearchRetrievalToMldev(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (
    fromDynamicRetrievalConfig !== undefined &&
    fromDynamicRetrievalConfig !== null
  ) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToMldev(
        apiClient,
        fromDynamicRetrievalConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function googleSearchRetrievalToVertex(
  apiClient: ApiClient,
  fromObject: types.GoogleSearchRetrieval,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromDynamicRetrievalConfig = common.getValueByPath(fromObject, [
    'dynamicRetrievalConfig',
  ]);
  if (
    fromDynamicRetrievalConfig !== undefined &&
    fromDynamicRetrievalConfig !== null
  ) {
    common.setValueByPath(
      toObject,
      ['dynamicRetrievalConfig'],
      dynamicRetrievalConfigToVertex(
        apiClient,
        fromDynamicRetrievalConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

/** @internal */
export function toolToMldev(
  apiClient: ApiClient,
  fromObject: types.Tool,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (
    fromFunctionDeclarations !== undefined &&
    fromFunctionDeclarations !== null
  ) {
    common.setValueByPath(
      toObject,
      ['functionDeclarations'],
      fromFunctionDeclarations.map((item: any) => {
        return functionDeclarationToMldev(apiClient, item, toObject);
      }),
    );
  }

  if (common.getValueByPath(fromObject, ['retrieval']) !== undefined) {
    throw new Error('retrieval parameter is not supported in Gemini API.');
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch !== undefined && fromGoogleSearch !== null) {
    common.setValueByPath(
      toObject,
      ['googleSearch'],
      googleSearchToMldev(apiClient, fromGoogleSearch, toObject),
    );
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (
    fromGoogleSearchRetrieval !== undefined &&
    fromGoogleSearchRetrieval !== null
  ) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToMldev(
        apiClient,
        fromGoogleSearchRetrieval,
        toObject,
      ),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution !== undefined && fromCodeExecution !== null) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

/** @internal */
export function toolToVertex(
  apiClient: ApiClient,
  fromObject: types.Tool,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionDeclarations = common.getValueByPath(fromObject, [
    'functionDeclarations',
  ]);
  if (
    fromFunctionDeclarations !== undefined &&
    fromFunctionDeclarations !== null
  ) {
    common.setValueByPath(
      toObject,
      ['functionDeclarations'],
      fromFunctionDeclarations.map((item: any) => {
        return functionDeclarationToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromRetrieval = common.getValueByPath(fromObject, ['retrieval']);
  if (fromRetrieval !== undefined && fromRetrieval !== null) {
    common.setValueByPath(toObject, ['retrieval'], fromRetrieval);
  }

  const fromGoogleSearch = common.getValueByPath(fromObject, ['googleSearch']);
  if (fromGoogleSearch !== undefined && fromGoogleSearch !== null) {
    common.setValueByPath(
      toObject,
      ['googleSearch'],
      googleSearchToVertex(apiClient, fromGoogleSearch, toObject),
    );
  }

  const fromGoogleSearchRetrieval = common.getValueByPath(fromObject, [
    'googleSearchRetrieval',
  ]);
  if (
    fromGoogleSearchRetrieval !== undefined &&
    fromGoogleSearchRetrieval !== null
  ) {
    common.setValueByPath(
      toObject,
      ['googleSearchRetrieval'],
      googleSearchRetrievalToVertex(
        apiClient,
        fromGoogleSearchRetrieval,
        toObject,
      ),
    );
  }

  const fromCodeExecution = common.getValueByPath(fromObject, [
    'codeExecution',
  ]);
  if (fromCodeExecution !== undefined && fromCodeExecution !== null) {
    common.setValueByPath(toObject, ['codeExecution'], fromCodeExecution);
  }

  return toObject;
}

function functionCallingConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined && fromMode !== null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (
    fromAllowedFunctionNames !== undefined &&
    fromAllowedFunctionNames !== null
  ) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

function functionCallingConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.FunctionCallingConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromMode = common.getValueByPath(fromObject, ['mode']);
  if (fromMode !== undefined && fromMode !== null) {
    common.setValueByPath(toObject, ['mode'], fromMode);
  }

  const fromAllowedFunctionNames = common.getValueByPath(fromObject, [
    'allowedFunctionNames',
  ]);
  if (
    fromAllowedFunctionNames !== undefined &&
    fromAllowedFunctionNames !== null
  ) {
    common.setValueByPath(
      toObject,
      ['allowedFunctionNames'],
      fromAllowedFunctionNames,
    );
  }

  return toObject;
}

function toolConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (
    fromFunctionCallingConfig !== undefined &&
    fromFunctionCallingConfig !== null
  ) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToMldev(
        apiClient,
        fromFunctionCallingConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function toolConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ToolConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromFunctionCallingConfig = common.getValueByPath(fromObject, [
    'functionCallingConfig',
  ]);
  if (
    fromFunctionCallingConfig !== undefined &&
    fromFunctionCallingConfig !== null
  ) {
    common.setValueByPath(
      toObject,
      ['functionCallingConfig'],
      functionCallingConfigToVertex(
        apiClient,
        fromFunctionCallingConfig,
        toObject,
      ),
    );
  }

  return toObject;
}

function createCachedContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined && fromTtl !== null) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (
    parentObject !== undefined &&
    fromExpireTime !== undefined &&
    fromExpireTime !== null
  ) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (
    parentObject !== undefined &&
    fromDisplayName !== undefined &&
    fromDisplayName !== null
  ) {
    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (
    parentObject !== undefined &&
    fromContents !== undefined &&
    fromContents !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents).map((item: any) => {
          return contentToMldev(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (
    parentObject !== undefined &&
    fromSystemInstruction !== undefined &&
    fromSystemInstruction !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToMldev(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (
    parentObject !== undefined &&
    fromTools !== undefined &&
    fromTools !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['tools'],
      fromTools.map((item: any) => {
        return toolToMldev(apiClient, item, toObject);
      }),
    );
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (
    parentObject !== undefined &&
    fromToolConfig !== undefined &&
    fromToolConfig !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToMldev(apiClient, fromToolConfig, toObject),
    );
  }

  return toObject;
}

function createCachedContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined && fromTtl !== null) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (
    parentObject !== undefined &&
    fromExpireTime !== undefined &&
    fromExpireTime !== null
  ) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (
    parentObject !== undefined &&
    fromDisplayName !== undefined &&
    fromDisplayName !== null
  ) {
    common.setValueByPath(parentObject, ['displayName'], fromDisplayName);
  }

  const fromContents = common.getValueByPath(fromObject, ['contents']);
  if (
    parentObject !== undefined &&
    fromContents !== undefined &&
    fromContents !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['contents'],
      t.tContents(
        apiClient,
        t.tContents(apiClient, fromContents).map((item: any) => {
          return contentToVertex(apiClient, item, toObject);
        }),
      ),
    );
  }

  const fromSystemInstruction = common.getValueByPath(fromObject, [
    'systemInstruction',
  ]);
  if (
    parentObject !== undefined &&
    fromSystemInstruction !== undefined &&
    fromSystemInstruction !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['systemInstruction'],
      contentToVertex(
        apiClient,
        t.tContent(apiClient, fromSystemInstruction),
        toObject,
      ),
    );
  }

  const fromTools = common.getValueByPath(fromObject, ['tools']);
  if (
    parentObject !== undefined &&
    fromTools !== undefined &&
    fromTools !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['tools'],
      fromTools.map((item: any) => {
        return toolToVertex(apiClient, item, toObject);
      }),
    );
  }

  const fromToolConfig = common.getValueByPath(fromObject, ['toolConfig']);
  if (
    parentObject !== undefined &&
    fromToolConfig !== undefined &&
    fromToolConfig !== null
  ) {
    common.setValueByPath(
      parentObject,
      ['toolConfig'],
      toolConfigToVertex(apiClient, fromToolConfig, toObject),
    );
  }

  return toObject;
}

function createCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined && fromModel !== null) {
    common.setValueByPath(
      toObject,
      ['model'],
      t.tCachesModel(apiClient, fromModel),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      createCachedContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function createCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.CreateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined && fromModel !== null) {
    common.setValueByPath(
      toObject,
      ['model'],
      t.tCachesModel(apiClient, fromModel),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      createCachedContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function getCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.GetCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function getCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.GetCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function deleteCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function deleteCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function updateCachedContentConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined && fromTtl !== null) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (
    parentObject !== undefined &&
    fromExpireTime !== undefined &&
    fromExpireTime !== null
  ) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  return toObject;
}

function updateCachedContentConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromTtl = common.getValueByPath(fromObject, ['ttl']);
  if (parentObject !== undefined && fromTtl !== undefined && fromTtl !== null) {
    common.setValueByPath(parentObject, ['ttl'], fromTtl);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (
    parentObject !== undefined &&
    fromExpireTime !== undefined &&
    fromExpireTime !== null
  ) {
    common.setValueByPath(parentObject, ['expireTime'], fromExpireTime);
  }

  return toObject;
}

function updateCachedContentParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      updateCachedContentConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function updateCachedContentParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.UpdateCachedContentParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(
      toObject,
      ['_url', 'name'],
      t.tCachedContentName(apiClient, fromName),
    );
  }

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      updateCachedContentConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function listCachedContentsConfigToMldev(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (
    parentObject !== undefined &&
    fromPageSize !== undefined &&
    fromPageSize !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (
    parentObject !== undefined &&
    fromPageToken !== undefined &&
    fromPageToken !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  return toObject;
}

function listCachedContentsConfigToVertex(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsConfig,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (
    parentObject !== undefined &&
    fromPageSize !== undefined &&
    fromPageSize !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  const fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (
    parentObject !== undefined &&
    fromPageToken !== undefined &&
    fromPageToken !== null
  ) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  return toObject;
}

function listCachedContentsParametersToMldev(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      listCachedContentsConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function listCachedContentsParametersToVertex(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsParameters,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined && fromConfig !== null) {
    common.setValueByPath(
      toObject,
      ['config'],
      listCachedContentsConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function cachedContentFromMldev(
  apiClient: ApiClient,
  fromObject: types.CachedContent,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName !== undefined && fromDisplayName !== null) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined && fromModel !== null) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined && fromCreateTime !== null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined && fromUpdateTime !== null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (fromExpireTime !== undefined && fromExpireTime !== null) {
    common.setValueByPath(toObject, ['expireTime'], fromExpireTime);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata !== undefined && fromUsageMetadata !== null) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

function cachedContentFromVertex(
  apiClient: ApiClient,
  fromObject: types.CachedContent,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined && fromName !== null) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  const fromDisplayName = common.getValueByPath(fromObject, ['displayName']);
  if (fromDisplayName !== undefined && fromDisplayName !== null) {
    common.setValueByPath(toObject, ['displayName'], fromDisplayName);
  }

  const fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined && fromModel !== null) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  const fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined && fromCreateTime !== null) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  const fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined && fromUpdateTime !== null) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  const fromExpireTime = common.getValueByPath(fromObject, ['expireTime']);
  if (fromExpireTime !== undefined && fromExpireTime !== null) {
    common.setValueByPath(toObject, ['expireTime'], fromExpireTime);
  }

  const fromUsageMetadata = common.getValueByPath(fromObject, [
    'usageMetadata',
  ]);
  if (fromUsageMetadata !== undefined && fromUsageMetadata !== null) {
    common.setValueByPath(toObject, ['usageMetadata'], fromUsageMetadata);
  }

  return toObject;
}

function deleteCachedContentResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function deleteCachedContentResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.DeleteCachedContentResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  return toObject;
}

function listCachedContentsResponseFromMldev(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken !== undefined && fromNextPageToken !== null) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromCachedContents = common.getValueByPath(fromObject, [
    'cachedContents',
  ]);
  if (fromCachedContents !== undefined && fromCachedContents !== null) {
    common.setValueByPath(
      toObject,
      ['cachedContents'],
      fromCachedContents.map((item: any) => {
        return cachedContentFromMldev(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}

function listCachedContentsResponseFromVertex(
  apiClient: ApiClient,
  fromObject: types.ListCachedContentsResponse,
  parentObject?: Record<string, any>,
): Record<string, any> {
  const toObject: Record<string, any> = {};

  const fromNextPageToken = common.getValueByPath(fromObject, [
    'nextPageToken',
  ]);
  if (fromNextPageToken !== undefined && fromNextPageToken !== null) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  const fromCachedContents = common.getValueByPath(fromObject, [
    'cachedContents',
  ]);
  if (fromCachedContents !== undefined && fromCachedContents !== null) {
    common.setValueByPath(
      toObject,
      ['cachedContents'],
      fromCachedContents.map((item: any) => {
        return cachedContentFromVertex(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}
