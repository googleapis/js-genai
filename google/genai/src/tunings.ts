/**
 * @license
 * Copyright 2024 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */

// Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import {ApiClient} from './_api_client';
import * as common from './_common';
import {BaseModule} from './_common';
import * as t from './_transformers';
import {PagedItem, Pager} from './pagers';
import * as types from './types';

function getTuningJobParametersToMldev(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  let fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function getTuningJobParametersToVertex(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['_url', 'name'], fromName);
  }

  let fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(toObject, ['config'], fromConfig);
  }

  return toObject;
}

function listTuningJobsConfigToMldev(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (fromPageSize !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  let fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (fromPageToken !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  let fromFilter = common.getValueByPath(fromObject, ['filter']);
  if (fromFilter !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);
  }

  return toObject;
}

function listTuningJobsConfigToVertex(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromPageSize = common.getValueByPath(fromObject, ['pageSize']);
  if (fromPageSize !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageSize'], fromPageSize);
  }

  let fromPageToken = common.getValueByPath(fromObject, ['pageToken']);
  if (fromPageToken !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'pageToken'], fromPageToken);
  }

  let fromFilter = common.getValueByPath(fromObject, ['filter']);
  if (fromFilter !== undefined) {
    common.setValueByPath(parentObject, ['_query', 'filter'], fromFilter);
  }

  return toObject;
}

function listTuningJobsParametersToMldev(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      listTuningJobsConfigToMldev(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function listTuningJobsParametersToVertex(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromConfig = common.getValueByPath(fromObject, ['config']);
  if (fromConfig !== undefined) {
    common.setValueByPath(
      toObject,
      ['config'],
      listTuningJobsConfigToVertex(apiClient, fromConfig, toObject),
    );
  }

  return toObject;
}

function tunedModelFromMldev(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromModel = common.getValueByPath(fromObject, ['name']);
  if (fromModel !== undefined) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  let fromEndpoint = common.getValueByPath(fromObject, ['name']);
  if (fromEndpoint !== undefined) {
    common.setValueByPath(toObject, ['endpoint'], fromEndpoint);
  }

  return toObject;
}

function tunedModelFromVertex(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromModel = common.getValueByPath(fromObject, ['model']);
  if (fromModel !== undefined) {
    common.setValueByPath(toObject, ['model'], fromModel);
  }

  let fromEndpoint = common.getValueByPath(fromObject, ['endpoint']);
  if (fromEndpoint !== undefined) {
    common.setValueByPath(toObject, ['endpoint'], fromEndpoint);
  }

  return toObject;
}

function tuningJobFromMldev(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  let fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState !== undefined) {
    common.setValueByPath(
      toObject,
      ['state'],
      t.tTuningJobStatus(apiClient, fromState),
    );
  }

  let fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  let fromStartTime = common.getValueByPath(fromObject, [
    'tuningTask',
    'startTime',
  ]);
  if (fromStartTime !== undefined) {
    common.setValueByPath(toObject, ['startTime'], fromStartTime);
  }

  let fromEndTime = common.getValueByPath(fromObject, [
    'tuningTask',
    'completeTime',
  ]);
  if (fromEndTime !== undefined) {
    common.setValueByPath(toObject, ['endTime'], fromEndTime);
  }

  let fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  let fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  let fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel !== undefined) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  let fromTunedModel = common.getValueByPath(fromObject, ['_self']);
  if (fromTunedModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['tunedModel'],
      tunedModelFromMldev(apiClient, fromTunedModel, toObject),
    );
  }

  let fromExperiment = common.getValueByPath(fromObject, ['experiment']);
  if (fromExperiment !== undefined) {
    common.setValueByPath(toObject, ['experiment'], fromExperiment);
  }

  let fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (fromLabels !== undefined) {
    common.setValueByPath(toObject, ['labels'], fromLabels);
  }

  let fromTunedModelDisplayName = common.getValueByPath(fromObject, [
    'tunedModelDisplayName',
  ]);
  if (fromTunedModelDisplayName !== undefined) {
    common.setValueByPath(
      toObject,
      ['tunedModelDisplayName'],
      fromTunedModelDisplayName,
    );
  }

  return toObject;
}

function tuningJobFromVertex(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromName = common.getValueByPath(fromObject, ['name']);
  if (fromName !== undefined) {
    common.setValueByPath(toObject, ['name'], fromName);
  }

  let fromState = common.getValueByPath(fromObject, ['state']);
  if (fromState !== undefined) {
    common.setValueByPath(
      toObject,
      ['state'],
      t.tTuningJobStatus(apiClient, fromState),
    );
  }

  let fromCreateTime = common.getValueByPath(fromObject, ['createTime']);
  if (fromCreateTime !== undefined) {
    common.setValueByPath(toObject, ['createTime'], fromCreateTime);
  }

  let fromStartTime = common.getValueByPath(fromObject, ['startTime']);
  if (fromStartTime !== undefined) {
    common.setValueByPath(toObject, ['startTime'], fromStartTime);
  }

  let fromEndTime = common.getValueByPath(fromObject, ['endTime']);
  if (fromEndTime !== undefined) {
    common.setValueByPath(toObject, ['endTime'], fromEndTime);
  }

  let fromUpdateTime = common.getValueByPath(fromObject, ['updateTime']);
  if (fromUpdateTime !== undefined) {
    common.setValueByPath(toObject, ['updateTime'], fromUpdateTime);
  }

  let fromError = common.getValueByPath(fromObject, ['error']);
  if (fromError !== undefined) {
    common.setValueByPath(toObject, ['error'], fromError);
  }

  let fromDescription = common.getValueByPath(fromObject, ['description']);
  if (fromDescription !== undefined) {
    common.setValueByPath(toObject, ['description'], fromDescription);
  }

  let fromBaseModel = common.getValueByPath(fromObject, ['baseModel']);
  if (fromBaseModel !== undefined) {
    common.setValueByPath(toObject, ['baseModel'], fromBaseModel);
  }

  let fromTunedModel = common.getValueByPath(fromObject, ['tunedModel']);
  if (fromTunedModel !== undefined) {
    common.setValueByPath(
      toObject,
      ['tunedModel'],
      tunedModelFromVertex(apiClient, fromTunedModel, toObject),
    );
  }

  let fromSupervisedTuningSpec = common.getValueByPath(fromObject, [
    'supervisedTuningSpec',
  ]);
  if (fromSupervisedTuningSpec !== undefined) {
    common.setValueByPath(
      toObject,
      ['supervisedTuningSpec'],
      fromSupervisedTuningSpec,
    );
  }

  let fromTuningDataStats = common.getValueByPath(fromObject, [
    'tuningDataStats',
  ]);
  if (fromTuningDataStats !== undefined) {
    common.setValueByPath(toObject, ['tuningDataStats'], fromTuningDataStats);
  }

  let fromEncryptionSpec = common.getValueByPath(fromObject, [
    'encryptionSpec',
  ]);
  if (fromEncryptionSpec !== undefined) {
    common.setValueByPath(toObject, ['encryptionSpec'], fromEncryptionSpec);
  }

  let fromDistillationSpec = common.getValueByPath(fromObject, [
    'distillationSpec',
  ]);
  if (fromDistillationSpec !== undefined) {
    common.setValueByPath(toObject, ['distillationSpec'], fromDistillationSpec);
  }

  let fromPartnerModelTuningSpec = common.getValueByPath(fromObject, [
    'partnerModelTuningSpec',
  ]);
  if (fromPartnerModelTuningSpec !== undefined) {
    common.setValueByPath(
      toObject,
      ['partnerModelTuningSpec'],
      fromPartnerModelTuningSpec,
    );
  }

  let fromPipelineJob = common.getValueByPath(fromObject, ['pipelineJob']);
  if (fromPipelineJob !== undefined) {
    common.setValueByPath(toObject, ['pipelineJob'], fromPipelineJob);
  }

  let fromExperiment = common.getValueByPath(fromObject, ['experiment']);
  if (fromExperiment !== undefined) {
    common.setValueByPath(toObject, ['experiment'], fromExperiment);
  }

  let fromLabels = common.getValueByPath(fromObject, ['labels']);
  if (fromLabels !== undefined) {
    common.setValueByPath(toObject, ['labels'], fromLabels);
  }

  let fromTunedModelDisplayName = common.getValueByPath(fromObject, [
    'tunedModelDisplayName',
  ]);
  if (fromTunedModelDisplayName !== undefined) {
    common.setValueByPath(
      toObject,
      ['tunedModelDisplayName'],
      fromTunedModelDisplayName,
    );
  }

  return toObject;
}

function listTuningJobsResponseFromMldev(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromNextPageToken = common.getValueByPath(fromObject, ['nextPageToken']);
  if (fromNextPageToken !== undefined) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  let fromTuningJobs = common.getValueByPath(fromObject, ['tunedModels']);
  if (fromTuningJobs !== undefined) {
    common.setValueByPath(
      toObject,
      ['tuningJobs'],
      fromTuningJobs!.map((item: any) => {
        return tuningJobFromMldev(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}

function listTuningJobsResponseFromVertex(
  apiClient: ApiClient,
  fromObject: any,
  parentObject?: any,
): Record<string, any> {
  let toObject: Record<string, any> = {};

  let fromNextPageToken = common.getValueByPath(fromObject, ['nextPageToken']);
  if (fromNextPageToken !== undefined) {
    common.setValueByPath(toObject, ['nextPageToken'], fromNextPageToken);
  }

  let fromTuningJobs = common.getValueByPath(fromObject, ['tuningJobs']);
  if (fromTuningJobs !== undefined) {
    common.setValueByPath(
      toObject,
      ['tuningJobs'],
      fromTuningJobs!.map((item: any) => {
        return tuningJobFromVertex(apiClient, item, toObject);
      }),
    );
  }

  return toObject;
}

export class Tunings extends BaseModule {
  constructor(private readonly apiClient: ApiClient) {
    super();
  }

  private async _get(
    name: string,
    config?: types.GetTuningJobConfig,
  ): Promise<types.TuningJob> {
    let response: Promise<types.TuningJob>;
    let path: string = '';
    let body: Record<string, any> = {};
    let kwargs: Record<string, any> = {};
    kwargs['name'] = name;
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = getTuningJobParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(path, body, undefined);

      return response.then((apiResponse) => {
        const resp = tuningJobFromVertex(this.apiClient, apiResponse);

        return resp as types.TuningJob;
      });
    } else {
      body = getTuningJobParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('{name}', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(path, body, undefined);

      return response.then((apiResponse) => {
        const resp = tuningJobFromMldev(this.apiClient, apiResponse);

        return resp as types.TuningJob;
      });
    }
  }

  private async _list(
    config?: types.ListTuningJobsConfig,
  ): Promise<types.ListTuningJobsResponse> {
    let response: Promise<types.ListTuningJobsResponse>;
    let path: string = '';
    let body: Record<string, any> = {};
    let kwargs: Record<string, any> = {};
    kwargs['config'] = config;
    if (this.apiClient.isVertexAI()) {
      body = listTuningJobsParametersToVertex(this.apiClient, kwargs);
      path = common.formatMap('tuningJobs', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(path, body, types.ListTuningJobsResponse);

      return response.then((apiResponse) => {
        const resp = listTuningJobsResponseFromVertex(
          this.apiClient,
          apiResponse,
        );
        Object.setPrototypeOf(resp, types.ListTuningJobsResponse.prototype);
        return resp as types.ListTuningJobsResponse;
      });
    } else {
      body = listTuningJobsParametersToMldev(this.apiClient, kwargs);
      path = common.formatMap('tunedModels', body['_url']);
      delete body['config']; // TODO: Remove this hack for removing config.
      response = this.apiClient.get(path, body, types.ListTuningJobsResponse);

      return response.then((apiResponse) => {
        const resp = listTuningJobsResponseFromMldev(
          this.apiClient,
          apiResponse,
        );
        Object.setPrototypeOf(resp, types.ListTuningJobsResponse.prototype);
        return resp as types.ListTuningJobsResponse;
      });
    }
  }

  get = (
    name: string,
    config?: types.GetTuningJobConfig,
  ): Promise<types.TuningJob> => {
    return this._get(name, config);
  };

  list = (
    config?: types.ListTuningJobsConfig,
  ): Promise<types.ListTuningJobsResponse> => {
    return this._list(config);
  };
}
